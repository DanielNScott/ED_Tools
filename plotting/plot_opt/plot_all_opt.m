function [ ] = plot_all_opt( opt_mat_name, obs_mat_name, tmin, tmax, tuse, nevals, save_rprt, report_name)
%PLOT_OPT_FIGS Plots items from output of optimization.
%   plot_type: 'all' graphs everything. See file for more options.
%   opt_mat_name: A string containing the filename of the optimization output.
%   opt_years: The years to plot. Set to [] if all.
%   save_rprt: Boolean, save graphs?

close all;                       % Close previously open graphs
load(opt_mat_name)               % Load the data
niter = size(hist.state,2);      % Get the number of iterations completed
load(obs_mat_name)

% Creates a latex report file and folder
if save_rprt
    mkdir opt_report
    fileID = fopen('opt_report/report.tex','w');
    fprintf(fileID, ...
    ['\\documentclass{article}\n', ...
    '\\usepackage{graphicx}\n', ...
    '\\usepackage{float}\n',...
    '\\usepackage{fullpage}\n',...
    '\\usepackage{hyperref}\n',...
    '   \\hypersetup{\n',...
    '   colorlinks=true,\n',...
    '   linkcolor=blue,\n',...
    '   filecolor=magenta,    \n',...  
    '   urlcolor=cyan,\n',...
    '}\n',...
    '\\title{Optimization Report: ', report_name,'}\n', ...
    '\\author{Daniel Scott}\n', ...
    '\\date{\\today}\n', ...
    '\\begin{document}\n', ...
    '\\maketitle\n', ...
    '\\tableofcontents\n',...
    '\\listoffigures\n',...
    '\\newpage\n',...
    '\\section{Data and parameters}\n',...
    'This section contains the tables specifying which data streams were used and which parameters were optimized\n\n', ...
    '\\begin{center}\n',...
        '\\begin{tabular}{ | l | l | l | l | p{1.5cm} |}\n',...
        '\\hline\n',...
        '\\bf{Term} & \\bf{Hourly} & \\bf{Daily} & \\bf{Monthly} & \\bf{Yearly} \\\\ \\hline\n']);
        
    fields = {'can_co2','NEE_Day','NEE_Night','Sens','Soil_Resp','BAG','BAG_Hw','BAG_Co','BAM','BAM_Hw','BAM_Co'};
    fields_d13c = {'can_d13C','NEE_d13C_Day','NEE_d13C_Night', '', 'sr_d13C', '', '', '', '', '', ''};
    resolutions = {'daily','hourly','monthly','yearly'};
    %names  = {'Canopy CO2', 'NEE, daytime', 'NEE, nighttime', 'Sensible heat flux', 'Soil respiration', 'Basal area growth, total', 'Basal area growth, hardwood', 'Basal area growth, conifer', 'Basal area mortality, total', 'Basal area mortality, hardwood', 'Basal area mortality, conifer'};
    dims = size(ui.opt_metadata);
    table = zeros(length(fields), length(resolutions));
    for row = 1:dims(1)
        res_ind = strcmp(ui.opt_metadata{row,1}, resolutions);
        fld_ind = strcmp(ui.opt_metadata{row,2}, fields);
        c13_ind = strcmp(ui.opt_metadata{row,2}, fields_d13c);
        table(fld_ind, res_ind) = table(fld_ind, res_ind) + 1;
        table(c13_ind, res_ind) = table(c13_ind, res_ind) + 1;
    end
    
    fprintf(fileID, ...
       ['Canopy CO2 & '                    , code(table(1,1))  ,' & ',  code(table(1,2))  ,' & ',  code(table(1,3))  ,' & ',  code(table(1,4))  ,' \\\\ \\hline\n',...
        'NEE, daytime & '                  , code(table(2,1))  ,' & ',  code(table(2,2))  ,' & ',  code(table(2,3))  ,' & ',  code(table(2,4))  ,' \\\\ \\hline\n',...
        'NEE, nighttime &'                 , code(table(3,1))  ,' & ',  code(table(3,2))  ,' & ',  code(table(3,3))  ,' & ',  code(table(3,4))  ,' \\\\ \\hline\n',...
        'Sensible heat flux & '            , code(table(4,1))  ,' & ',  code(table(4,2))  ,' & ',  code(table(4,3))  ,' & ',  code(table(4,4))  ,' \\\\ \\hline\n',...
        'Soil respiration & '              , code(table(5,1))  ,' & ',  code(table(5,2))  ,' & ',  code(table(5,3))  ,' & ',  code(table(5,4))  ,' \\\\ \\hline\n',...
        'Basal area growth, total & '      , code(table(6,1))  ,' & ',  code(table(6,2))  ,' & ',  code(table(6,3))  ,' & ',  code(table(6,4))  ,' \\\\ \\hline\n',...
        'Basal area growth, hardwood & '   , code(table(7,1))  ,' & ',  code(table(7,2))  ,' & ',  code(table(7,3))  ,' & ',  code(table(7,4))  ,' \\\\ \\hline\n',...
        'Basal area growth, conifer & '    , code(table(8,1))  ,' & ',  code(table(8,2))  ,' & ',  code(table(8,3))  ,' & ',  code(table(8,4))  ,' \\\\ \\hline\n',...
        'Basal area mortality, total & '   , code(table(9,1))  ,' & ',  code(table(9,2))  ,' & ',  code(table(9,3))  ,' & ',  code(table(9,4))  ,' \\\\ \\hline\n',...
        'Basal area mortality, hardwood & ', code(table(10,1)) ,' & ',  code(table(10,2)) ,' & ',  code(table(10,3)) ,' & ',  code(table(10,4)) ,' \\\\ \\hline\n',...
        'Basal area mortality, conifer & ' , code(table(11,1)) ,' & ',  code(table(11,2)) ,' & ',  code(table(11,3)) ,' & ',  code(table(11,4)) ,' \\\\ \\hline\n',...
        '\\end{tabular}\n',... 
    '\\end{center}\n', ...
    '\n', ...
    '\\section{Parameter and fit improvement}\n',...
    'This section contains figures detailing how parameters were changed and how fit was improved.\n\n', ...
    ]);
end

%----------------------------------------------------------------------------------------------%
% Get run info such as start and end indices of simulation
%----------------------------------------------------------------------------------------------%
[start_yr, start_mo, ~,~,~,~] = tokenize_time(hist.pred_best.sim_beg,'ED','num');
[end_yr  , end_mo  , ~,~,~,~] = tokenize_time(hist.pred_best.sim_end,'ED','num');
part_yrs  = start_yr:end_yr;
whole_yrs = (start_yr + 1*(start_mo ~= 1)):(end_yr -1 - 1*(end_mo ~= 1));
for i = 1:numel(whole_yrs)
   opt_yr_strs{i} = num2str(whole_yrs(i));
end

%ndyr = size(hist.stats.likely.yearly.NEE,1);    % The number of years
%ndm  = size(hist.stats.likely.monthly.NEE,1);   % The number of months
%----------------------------------------------------------------------------------------------%

if strcmp(ui.opt_type,'PSO')
   plot_state_hist_pso( cfe.iter, hist.obj, hist.state, ui.state_ref, ui.nps, cfe.labels(:,1), save_rprt, fileID);
   %plot_part_ids(cfe,data,hist,ui,save_rprt);
elseif strcmp(ui.opt_type,'NM')
   plot_state_hist_nm(cfe,hist,ui,save_rprt)
else
   plot_state_hist_seq(cfe,data,hist,nfo,ui,save_rprt);
end

%plot_fit_stats(cfe,hist,ui,save_rprt);

plot_param_stars(hist,cfe,ui.opt_type,ui.state_ref,save_rprt, fileID);

%init_best_ind   = hist.obj == min(hist.obj(:,1));
%global_best_ind = hist.obj == min(hist.obj(:));

if strcmp(ui.opt_type,'PSO')
   hist.iter_best = find(sum( hist.obj == min(hist.obj(:)) ));
elseif strcmp(ui.opt_type,'NM')
   hist.iter_best = length(hist.stats.ns);
end

%if init_best_ind ~= global_best_ind && isfield(hist.stats,'ref')
plot_likely_analy(hist.iter_best, hist.stats, save_rprt, fileID);
%end

plot_pred_and_obs(hist.obj, hist.iter_best, hist.pred_best, hist.stats, hist.pred_ref, obs, ...
    ui.opt_type, ui.opt_metadata, save_rprt, fileID);

if save_rprt
    fprintf(fileID, ...
    ['\\section{Local quadratic likelihood fit}\n',...
    'This section contains figures detailing how well the likelihood function is approximated in ',...
    'the neighborhood of the of the maximum-likelihood parameters, as well as how the approximate ', ...
    'likelihood translates into parameter uncertainty estimates.']);
end

[flat_locs, flat_objs] = flatten(hist.state, hist.obj, ui.nps, ui.niter);
covariance = fit_quad_to_pso_objs(tmin, tmax, tuse, nevals, flat_locs, flat_objs, ui.params, hist.best_state', save_rprt, fileID);
save('covar.mat','covariance')

if save_rprt
    fprintf(fileID,'\\end{document}');
    fclose(fileID);
end

end

function [str] = code(int)
    if int == 0
        str = '';
    elseif int == 1
        str = 'x';
    elseif int == 2
        str = 'x, +';
    end
end
